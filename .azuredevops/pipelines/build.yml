parameters:
  - name: id
    type: string
  - name: type
    type: string
  - name: state
    type: string
  - name: regions
    type: object
    default: ["default"]
  - name: secrets
    type: object
    default: []
  - name: dryrun
    type: boolean
    default: false

stages:
- stage: build_${{ parameters.id }}
  displayName: 'Build ${{ parameters.id }}'

  jobs:
    - ${{ if or(eq(parameters.type,'default'),eq(parameters.type,'bash'),eq(parameters.type,'python'),eq(parameters.type,'container')) }}:
      - ${{ each region in parameters.regions }}:
        - job: build_${{parameters.type}}
          displayName: Build ${{parameters.type}}
          dependsOn: begin_build
          steps:

            - template: get-state.yml
              parameters: 
                state: ${{parameters.state}}

            - script: | 
                python set-state.py build_${{parameters.id}}_${{region}} $(System.DefaultWorkingDirectory)/build-artifacts/state.ini "$SECRETS" "$REGIONS"
                chmod +x build_${{parameters.id}}_${{region}}.sh && source build_${{parameters.id}}_${{region}}.sh 
              displayName: Set state
              workingDirectory: $(System.DefaultWorkingDirectory)/templates/scripts/process
              env:
                SECRETS: "${{convertToJson(parameters.secrets)}}"
                REGIONS: "${{convertToJson(parameters.regions)}}"

            - script: env | sort
              displayName: List all variables

            - ${{if eq(parameters.dryrun,true)}}:
              - script: echo Dry run of build...
                displayName: Build ${{parameters.type}} (dry run)

            - ${{if ne(parameters.dryrun,true)}}:
              - script: echo Building...
                displayName: Build ${{parameters.type}}

    - ${{ if or(eq(parameters.type,'windows'), eq(parameters.type,'powershell')) }}:
      - job: build_${{parameters.type}}
        displayName: Build ${{parameters.type}}
        dependsOn: validate_${{parameters.type}}_build
        steps:
          - checkout: templates
          - checkout: self
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: state
              path: $(System.DefaultWorkingDirectory)/build-artifacts
          - script: echo "TODO - write the powershell version of export_state.sh" 
            displayName: Export state
            workingDirectory: $(System.DefaultWorkingDirectory)/templates/scripts
          - script: env | sort
            displayName: List all variables

          - script: echo Building for Windows...
            displayName: Build application

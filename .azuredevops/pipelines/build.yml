parameters:
  - name: id
    type: string
  - name: type
    type: string
  - name: state
    type: string
  - name: regions
    type: object
    default: ["default"]
  - name: secrets
    type: object
    default: []
  - name: dryrun
    type: boolean
    default: false

stages:
- stage: build_${{ parameters.id }}
  displayName: 'Build ${{ parameters.id }}'

  jobs:
    - job: validate_pipeline
      displayName: Validate pipeline
      steps:
        - checkout: templates
        - checkout: self

        - script: python validate-state.py $(System.DefaultWorkingDirectory)/${BUILD_REPOSITORY_NAME}/.azuredevops/pipelines/${{parameters.state}} $(System.DefaultWorkingDirectory)/templates/.azuredevops/pipelines/deploy.yml
          displayName: Validate state
          workingDirectory: $(System.DefaultWorkingDirectory)/templates/scripts/process

        - publish: $(System.DefaultWorkingDirectory)/templates/scripts/process/output/state.ini
          artifact: build-artifacts

    - ${{ if or(eq(parameters.type,'container'),eq(parameters.type,'bash')) }}:
      - job: build_${{parameters.type}}
        displayName: Build ${{parameters.type}}
        dependsOn: validate_pipeline
        steps:
          - checkout: templates
          - checkout: self
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: build-artifacts
              path: $(System.DefaultWorkingDirectory)/build-artifacts

          - script: | 
              python export-state.py build_${{parameters.id}} $(System.DefaultWorkingDirectory)/build-artifacts/state.ini "$SECRETS"
              chmod +x build_${{parameters.id}}.sh && source build_${{parameters.id}}.sh 
            displayName: Export state
            workingDirectory: $(System.DefaultWorkingDirectory)/templates/scripts/process
            env:
              SECRETS: "${{convertToJson(parameters.secrets)}}"

          - script: env | sort
            displayName: List all variables

          - script: echo Building...
            displayName: Build ${{parameters.type}}
            condition: and(succeeded(), eq(${{ parameters.dryrun }}, false))

          - script: echo Dry run of build...
            displayName: Deploy ${{parameters.type}}
            condition: and(succeeded(), eq(${{ parameters.dryrun }}, true))

    - ${{ if eq(parameters.type, 'windows') }}:
      - job: build_${{parameters.type}}
        displayName: Build ${{parameters.type}}
        dependsOn: validate_${{parameters.type}}_build
        steps:
          - checkout: templates
          - checkout: self
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: state
              path: $(System.DefaultWorkingDirectory)/build-artifacts
          - script: echo "TODO - write the powershell version of export_state.sh" 
            displayName: Export state
            workingDirectory: $(System.DefaultWorkingDirectory)/templates/scripts
          - script: env | sort
            displayName: List all variables

          - script: echo Building for Windows...
            displayName: Build application

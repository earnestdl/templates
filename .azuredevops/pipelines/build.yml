parameters:
  - name: id
    type: string
  - name: type
    type: string
  - name: state
    type: string
  - name: regions
    type: object
    default: ["default"]
  - name: secrets
    type: object
    default: []
  - name: dryrun
    type: boolean
    default: false

stages:
- stage: build_${{ parameters.id }}
  displayName: 'Build ${{ parameters.id }}'

  jobs:
    - job: begin_build
      displayName: Begin Build
      steps:
        - checkout: templates
        - checkout: self

        - script: python validate-state.py $(System.DefaultWorkingDirectory)/${BUILD_REPOSITORY_NAME}/.azuredevops/pipelines/${{parameters.state}} $(System.DefaultWorkingDirectory)/templates/.azuredevops/pipelines/deploy.yml
          displayName: Validate state
          workingDirectory: $(System.DefaultWorkingDirectory)/templates/scripts/process

        - script: |
            COMMON_SCRIPT_EXT=sh
            if [ -f $(Build.SourcesDirectory)/src/build.$(COMMON_SCRIPT_EXT) ]; then
              echo "Script found, proceeding with execution"
              chmod +x $(Build.SourcesDirectory)/src/build.$(COMMON_SCRIPT_EXT)
              cp $(Build.SourcesDirectory)/src/build.$(COMMON_SCRIPT_EXT) $(Build.ArtifactStagingDirectory)
            else
              echo "Script not found, skipping this step"
            fi
          displayName: 'Check and Prepare Script'

        - publish: $(System.DefaultWorkingDirectory)/templates/scripts/process/output/state.ini
          artifact: build-artifacts

    - ${{ if or(eq(parameters.type,'container'),eq(parameters.type,'bash')) }}:
      - ${{ each region in parameters.regions }}:
        - job: build_${{parameters.type}}
          displayName: Build ${{parameters.type}}
          dependsOn: begin_build
          steps:
            - checkout: templates
            - checkout: self
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: build-artifacts
                path: $(System.DefaultWorkingDirectory)/build-artifacts

            - script: | 
                python export-state.py build_${{parameters.id}}_${{region}} $(System.DefaultWorkingDirectory)/build-artifacts/state.ini "$SECRETS" "$REGIONS"
                chmod +x build_${{parameters.id}}_${{region}}.sh && source build_${{parameters.id}}_${{region}}.sh 
              displayName: Export state
              workingDirectory: $(System.DefaultWorkingDirectory)/templates/scripts/process
              env:
                SECRETS: "${{convertToJson(parameters.secrets)}}"
                REGIONS: "${{convertToJson(parameters.regions)}}"

            - script: env | sort
              displayName: List all variables

            - ${{if eq(parameters.dryrun,true)}}:
              - script: echo Dry run of build...
                displayName: Build ${{parameters.type}} (dry run)

            - ${{if ne(parameters.dryrun,true)}}:
              - script: echo Building...
                displayName: Build ${{parameters.type}}

    - ${{ if eq(parameters.type, 'windows') }}:
      - job: build_${{parameters.type}}
        displayName: Build ${{parameters.type}}
        dependsOn: validate_${{parameters.type}}_build
        steps:
          - checkout: templates
          - checkout: self
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: state
              path: $(System.DefaultWorkingDirectory)/build-artifacts
          - script: echo "TODO - write the powershell version of export_state.sh" 
            displayName: Export state
            workingDirectory: $(System.DefaultWorkingDirectory)/templates/scripts
          - script: env | sort
            displayName: List all variables

          - script: echo Building for Windows...
            displayName: Build application
